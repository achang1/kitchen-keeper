###### USERS ######

# Anonymous query of all users.

query {
  allUsers {
    id
    userName
    email
    firstName
    lastName
  }
}

# Anonymous query of a single user. Can be queried by id, user name or email.

query {
  user(id:1){
    userName
    email
    firstName
    lastName
  } 
}

# Create new user. userName and email have to be unique, otherwise will error
# TODO: Handling of errorring input

mutation createUser{
  createUser(input: {
    userName: "tom"
    email: "tom@gmail.com"
    firstName: "Tom"
    lastName: "Hanks"
    
  }){
    ok
    user{
      id
      userName
      email
      firstName
      lastName
    }
  }
}

# Update User. 
# TODO: Right now we can only update user by id, should we also be able to update user by
# retrieving username and email? If so, should they be allowed to update their username 
# and email?

mutation updateUser{
  updateUser(id:1, input: {
    email: "tomhanks@gmail.com"
  }){
    ok
    user {
      id
      userName
      email
      firstName
      lastName
    }
  }
}

# Delete User.
# TODO: If there is a storage that only has this user, it should be deleted as well.
# Currently, the storage will be updated to have 0 users.

mutation deleteUser {
  deleteUser(id: 7) {
    ok
  }
}


##### STORAGE #####

# Anonymous query of all storages

query{
  allStorages {
    name
    id
    storageType
    users {
      userName
      email
    }
  }
}

# Anonymous query of a single storage, specified by id.
query {
  storage (id: 2) {
    name
    storageType
    users {
      userName
      id
    }
  }
}

# Create storage. The users can be specified by id, email or name.

mutation createStorage{
  createStorage (input: {
    name: "Chris's kitchen fridge"
    storageType: "fridge"
    users: [
      {
        id: 2
      }
      {
        email: "chrish@gmail.com"
      }
    ]
  }){
    ok
    storage{
      id
      name
      storageType
      users {
        id
        userName
      }
    }
  }
}

# Update storage.

mutation updateStorage {
  updateStorage (id: 2, input: {
    users: [
      {
        id: 2
      }
      {
        id:3
      }
      {
        email: "rdj@gmail.com"
      }
    ]})
  {
    ok
    storage {
      id
      name
      storageType
      users {
        id
        userName
        email
      }
    }
  }
}

# Delete Storage.

mutation deleteStorage {
  deleteStorage (id: 3) {
    ok
  }
}

###### ITEMS ######

# Anonymous query of all items.
# TODO: handle error when expiryDate is null

query{
  allItems {
    name
    user {
      id
    }
    storage {
      id
    }
    category
    quantity
    purchaseDate
    expiryDate
    perishable
  }
}

# Find by username, email, category, expiry date, perishable
# TODO: need to handle error when more than 1 item returned.
# TODO: filter via username, email

query{
  item(category: "Fruits & Veggies") {
    name
  }
}

query{
  item(perishable: true) {
    name
  }
}